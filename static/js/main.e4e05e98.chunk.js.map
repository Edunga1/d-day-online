{"version":3,"sources":["register/after-days.js","register/Register.js","viewer/parse-youtube-id.js","viewer/Viewer.js","home/Home.js","embed/parse-query-string.js","embed/timer-utils.js","embed/Embed.js","App.js","serviceWorker.js","index.js"],"names":["afterDays","date","n","d","Date","setDate","getDate","Register","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","youtube","onYoutubeChange$","Subject","onMessageChange$","onYearChange$","pipe","map","x","Number","onMonthChange$","onDayChange$","onChange","props","after10days","year","getFullYear","month","getMonth","day","setState","combineLatest","startWith","debounceTime","arr","message","subscribe","objectSpread","complete","_this2","_this$state","react_default","a","createElement","className","type","defaultValue","e","next","target","value","placeholder","min","max","Component","parseYoutubeId","str","youtubeIdMatch","match","length","Viewer","refAutogrowBox","setAutogrowBoxRef","selectAndCopyAutogrow","select","document","execCommand","_this$props","youtubeId","time","getTime","messageEncoded","encodeURI","queryString","concat","embedAttrs","src","width","height","frameBorder","attributes","embedSource","window","location","href","assign","title","ref","readOnly","onClick","defaultProps","Home","onRegisterChange$","obj","Viewer_Viewer","Register_Register","addZero","toTimerString","Math","Embed","timer","tick$","interval","diff","days","floor","hours","minutes","seconds","search","_parseQueryString","parseQueryString","v","t","m","_this$state$timer","siteUrl","origin","process","allow","allowFullScreen","decodeURI","rel","App","BrowserRouter","basename","Switch","Route","exact","path","component","Boolean","hostname","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e4e05e98.chunk.js","sourcesContent":["/**\n * @param {Date} date\n * @param {number} n\n * @return {Date} a date after n days\n */\nconst afterDays = (date, n) => {\n  const d = new Date(date);\n  d.setDate(d.getDate() + n);\n  return d;\n};\n\nexport default afterDays;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Subject, combineLatest } from 'rxjs';\nimport { map, startWith, debounceTime } from 'rxjs/operators';\nimport './Register.css';\nimport afterDays from './after-days';\n\nexport default class Register extends Component {\n  state = {\n    youtube: 'https://www.youtube.com/watch?v=yXQViqx6GMY',\n  };\n\n  constructor() {\n    super();\n    this.onYoutubeChange$ = new Subject();\n    this.onMessageChange$ = new Subject();\n    this.onYearChange$ = new Subject().pipe(map(x => Number(x)));\n    this.onMonthChange$ = new Subject().pipe(map(x => x - 1));\n    this.onDayChange$ = new Subject().pipe(map(x => Number(x)));\n  }\n\n  componentDidMount() {\n    const { onChange } = this.props;\n    const after10days = afterDays(new Date(), 10);\n    const year = after10days.getFullYear();\n    const month = after10days.getMonth() + 1;\n    const day = after10days.getDate();\n    const { youtube } = this.state;\n\n    this.setState({\n      year,\n      month,\n      day,\n    });\n\n    combineLatest(\n      this.onYearChange$.pipe(startWith(year)),\n      this.onMonthChange$.pipe(startWith(month)),\n      this.onDayChange$.pipe(startWith(day)),\n      this.onYoutubeChange$.pipe(startWith(youtube)),\n      this.onMessageChange$.pipe(\n        debounceTime(1000),\n        startWith(''),\n      ),\n    ).pipe(\n      map(arr => ({\n        date: new Date(arr[0], arr[1] - 1, arr[2]),\n        youtube: arr[3],\n        message: arr[4],\n      })),\n    ).subscribe(state => onChange({ ...state }));\n  }\n\n  componentWillUnmount() {\n    this.onYearChange$.complete();\n    this.onMonthChange$.complete();\n    this.onDayChange$.complete();\n    this.onYoutubeChange$.complete();\n  }\n\n  render() {\n    const {\n      youtube, year, month, day,\n    } = this.state;\n    const onYoutubeChange = e => this.onYoutubeChange$.next(e.target.value);\n    const onMessageChange = e => this.onMessageChange$.next(e.target.value);\n    const onYearChange = e => this.onYearChange$.next(e.target.value);\n    const onMonthChange = e => this.onMonthChange$.next(e.target.value);\n    const onDayChange = e => this.onDayChange$.next(e.target.value);\n    return (\n      <div className=\"register\">\n        <input\n          className=\"inp inp-youtube\"\n          type=\"text\"\n          defaultValue={youtube}\n          onChange={onYoutubeChange}\n          placeholder=\"youtube URL\"\n        />\n        <input\n          className=\"inp\"\n          type=\"text\"\n          onChange={onMessageChange}\n          placeholder=\"Message\"\n        />\n        <div>\n          <input className=\"inp\" type=\"number\" min=\"1\" max=\"9999\" placeholder=\"Year\" defaultValue={year} onChange={onYearChange} />\n          <input className=\"inp\" type=\"number\" min=\"1\" max=\"12\" placeholder=\"Month\" defaultValue={month} onChange={onMonthChange} />\n          <input className=\"inp\" type=\"number\" min=\"1\" max=\"31\" placeholder=\"Day\" defaultValue={day} onChange={onDayChange} />\n        </div>\n      </div>\n    );\n  }\n}\n\nRegister.propTypes = {\n  onChange: PropTypes.func.isRequired,\n};\n","/**\n * @param {string} str\n * @return {string} youtube video id. if invalid, returns empty string\n */\nconst parseYoutubeId = (str) => {\n  const youtubeIdMatch = typeof str === 'string' && str.match(/v=(\\w+)/);\n  const youtubeId = (\n    youtubeIdMatch\n    && youtubeIdMatch.length >= 2\n    && youtubeIdMatch[1]\n  ) || '';\n  return youtubeId;\n};\n\nexport default parseYoutubeId;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport parseYoutubeId from './parse-youtube-id';\nimport './Viewer.css';\n\nexport default class Viewer extends Component {\n  constructor() {\n    super();\n    this.refAutogrowBox = null;\n    this.setAutogrowBoxRef = (e) => {\n      this.refAutogrowBox = e;\n    };\n    this.selectAndCopyAutogrow = () => {\n      if (!this.refAutogrowBox) return;\n      this.refAutogrowBox.select();\n      document.execCommand('copy');\n    };\n  }\n\n  render() {\n    const { youtube, date, message } = this.props;\n    const youtubeId = parseYoutubeId(youtube);\n    const time = date && date.getTime();\n    const messageEncoded = encodeURI(message);\n    const queryString = `embed?t=${time}&v=${youtubeId}&m=${messageEncoded}`;\n    const embedAttrs = {\n      src: queryString,\n      width: 700,\n      height: 180,\n      frameBorder: 0,\n    };\n    const attributes = `width=\"${embedAttrs.width}\" `\n      + `height=\"${embedAttrs.height}\" `\n      + `frameborder=\"${embedAttrs.frameBorder}\"`;\n    const embedSource = `<iframe src=\"${window.location.href}${queryString}\" ${attributes}></iframe>`;\n    return (\n      <div>\n        <iframe\n          title=\"embed\"\n          {...embedAttrs}\n        />\n        <div className=\"box-autogrow\">\n          <textarea\n            className=\"inp-autogrow\"\n            ref={this.setAutogrowBoxRef}\n            value={embedSource}\n            readOnly\n          />\n          <button\n            className=\"btn-copy\"\n            type=\"button\"\n            onClick={this.selectAndCopyAutogrow}\n          >\n            COPY\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nViewer.propTypes = {\n  youtube: PropTypes.string,\n  date: PropTypes.instanceOf(Date),\n};\n\nViewer.defaultProps = {\n  youtube: '',\n  date: null,\n};\n","import React, { Component } from 'react';\nimport { Subject } from 'rxjs';\nimport './Home.css';\nimport Register from '../register/Register';\nimport Viewer from '../viewer/Viewer';\n\nexport default class Home extends Component {\n  state = {\n    youtube: '',\n  }\n\n  constructor() {\n    super();\n    this.onRegisterChange$ = new Subject();\n    this.onRegisterChange$.subscribe(obj => this.setState(obj));\n  }\n\n  render() {\n    const { youtube, date, message } = this.state;\n    return (\n      <div className=\"home\">\n        <Viewer youtube={youtube} date={date} message={message} />\n        <div className=\"box-register\">\n          <Register onChange={obj => this.onRegisterChange$.next(obj)} />\n        </div>\n      </div>\n    );\n  }\n}\n","import queryString from 'query-string';\n\nexport default queryString.parse;\n","/**\n * @param {number} n\n * @return {string}\n */\nconst addZero = n => (n < 10 ? `0${n}` : n);\n\n/**\n * @param {number} n\n * @return {string}\n */\nconst toTimerString = n => (typeof n === 'number' && `${addZero(Math.max(n, 0))}:`) || '';\n\n/**\n * @param {number} n milliseconds\n * @return {string}\n * ex.\n * 931 => 93\n * 91 => 09\n */\nconst toMsString = n => addZero(\n  Math.max(Math.floor(n / 10), 0),\n);\n\nexport {\n  toTimerString,\n  toMsString,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { interval } from 'rxjs';\nimport './Embed.css';\nimport parseQueryString from './parse-query-string';\nimport { toTimerString, toMsString } from './timer-utils';\n\nconst MS_DAY = 86400000;\nconst MS_HOUR = 3600000;\nconst MS_MINUTE = 60000;\nconst MS_SECOND = 1000;\n\nexport default class Embed extends Component {\n  state = {\n    timer: '',\n  };\n\n  componentDidMount() {\n    this.tick$ = interval(32).subscribe(() => {\n      let diff = this.time - new Date();\n      const days = Math.floor(diff / MS_DAY);\n      diff %= MS_DAY;\n      const hours = Math.floor(diff / MS_HOUR);\n      diff %= MS_HOUR;\n      const minutes = Math.floor(diff / MS_MINUTE);\n      diff %= MS_MINUTE;\n      const seconds = Math.floor(diff / MS_SECOND);\n      diff %= MS_SECOND;\n      const timer = toTimerString(days)\n        + toTimerString(hours)\n        + toTimerString(minutes)\n        + toTimerString(seconds)\n        + toMsString(diff);\n      this.setState({ timer });\n    });\n  }\n\n  render() {\n    const { location: { search } } = this.props;\n    const { v: youtubeId, t: time, m: message } = parseQueryString(search);\n    const src = `https://www.youtube.com/embed/${youtubeId}?autoplay=1`;\n    const { timer = '' } = this.state;\n    const siteUrl = `${window.location.origin}${process.env.PUBLIC_URL}`;\n    this.time = time;\n    return (\n      <div className=\"embed\">\n        <iframe\n          title=\"embed youtube\"\n          className=\"iframe-youtube\"\n          src={src}\n          width=\"320\"\n          height=\"180\"\n          frameBorder=\"0\"\n          allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n          allowFullScreen\n        />\n        <div className=\"wrap-timer\">\n          <span>{decodeURI(message || '')}</span>\n          <span className=\"txt-timer\">{timer}</span>\n        </div>\n        <a\n          className=\"link-site\"\n          href={siteUrl}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {siteUrl}\n        </a>\n      </div>\n    );\n  }\n}\n\nEmbed.propTypes = {\n  location: PropTypes.shape({\n    search: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Home from './home/Home';\nimport Embed from './embed/Embed';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/embed\" component={Embed} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}